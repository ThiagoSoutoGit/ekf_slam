// Auto-generated. Do not edit!

// (in-package cares_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');
let std_msgs = _finder('std_msgs');

//-----------------------------------------------------------

class ScanningGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.command = null;
      this.init_pose = null;
      this.planning_link = null;
      this.world_link = null;
      this.get_marker = null;
      this.path_id = null;
      this.file_path = null;
    }
    else {
      if (initObj.hasOwnProperty('command')) {
        this.command = initObj.command
      }
      else {
        this.command = 0;
      }
      if (initObj.hasOwnProperty('init_pose')) {
        this.init_pose = initObj.init_pose
      }
      else {
        this.init_pose = new geometry_msgs.msg.PoseStamped();
      }
      if (initObj.hasOwnProperty('planning_link')) {
        this.planning_link = initObj.planning_link
      }
      else {
        this.planning_link = new std_msgs.msg.String();
      }
      if (initObj.hasOwnProperty('world_link')) {
        this.world_link = initObj.world_link
      }
      else {
        this.world_link = new std_msgs.msg.String();
      }
      if (initObj.hasOwnProperty('get_marker')) {
        this.get_marker = initObj.get_marker
      }
      else {
        this.get_marker = new std_msgs.msg.Bool();
      }
      if (initObj.hasOwnProperty('path_id')) {
        this.path_id = initObj.path_id
      }
      else {
        this.path_id = 0;
      }
      if (initObj.hasOwnProperty('file_path')) {
        this.file_path = initObj.file_path
      }
      else {
        this.file_path = new std_msgs.msg.String();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ScanningGoal
    // Serialize message field [command]
    bufferOffset = _serializer.uint8(obj.command, buffer, bufferOffset);
    // Serialize message field [init_pose]
    bufferOffset = geometry_msgs.msg.PoseStamped.serialize(obj.init_pose, buffer, bufferOffset);
    // Serialize message field [planning_link]
    bufferOffset = std_msgs.msg.String.serialize(obj.planning_link, buffer, bufferOffset);
    // Serialize message field [world_link]
    bufferOffset = std_msgs.msg.String.serialize(obj.world_link, buffer, bufferOffset);
    // Serialize message field [get_marker]
    bufferOffset = std_msgs.msg.Bool.serialize(obj.get_marker, buffer, bufferOffset);
    // Serialize message field [path_id]
    bufferOffset = _serializer.uint8(obj.path_id, buffer, bufferOffset);
    // Serialize message field [file_path]
    bufferOffset = std_msgs.msg.String.serialize(obj.file_path, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ScanningGoal
    let len;
    let data = new ScanningGoal(null);
    // Deserialize message field [command]
    data.command = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [init_pose]
    data.init_pose = geometry_msgs.msg.PoseStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [planning_link]
    data.planning_link = std_msgs.msg.String.deserialize(buffer, bufferOffset);
    // Deserialize message field [world_link]
    data.world_link = std_msgs.msg.String.deserialize(buffer, bufferOffset);
    // Deserialize message field [get_marker]
    data.get_marker = std_msgs.msg.Bool.deserialize(buffer, bufferOffset);
    // Deserialize message field [path_id]
    data.path_id = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [file_path]
    data.file_path = std_msgs.msg.String.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.PoseStamped.getMessageSize(object.init_pose);
    length += std_msgs.msg.String.getMessageSize(object.planning_link);
    length += std_msgs.msg.String.getMessageSize(object.world_link);
    length += std_msgs.msg.String.getMessageSize(object.file_path);
    return length + 3;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cares_msgs/ScanningGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'cae2bb73f288441970bca461bed96dca';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    # Arm Command Enumeration
    uint8 STOP    = 0
    uint8 MAP     = 1
    uint8 MOVE    = 2 # Move Arm to Position
    uint8 ACTUATE = 3 # e.g. prune/pick/thin
    
    # Arm command
    uint8 command
    
    # Initial Pose to move arm too
    geometry_msgs/PoseStamped init_pose
    
    # Planning Link
    std_msgs/String planning_link
    
    # World Link
    std_msgs/String world_link
    
    # To seek out alignment marker or not before scanning
    std_msgs/Bool get_marker
    
    # Path ID from path factory to generate scanning path
    uint8 path_id
    
    # Path to save data too
    std_msgs/String file_path
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: std_msgs/String
    string data
    
    ================================================================================
    MSG: std_msgs/Bool
    bool data
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ScanningGoal(null);
    if (msg.command !== undefined) {
      resolved.command = msg.command;
    }
    else {
      resolved.command = 0
    }

    if (msg.init_pose !== undefined) {
      resolved.init_pose = geometry_msgs.msg.PoseStamped.Resolve(msg.init_pose)
    }
    else {
      resolved.init_pose = new geometry_msgs.msg.PoseStamped()
    }

    if (msg.planning_link !== undefined) {
      resolved.planning_link = std_msgs.msg.String.Resolve(msg.planning_link)
    }
    else {
      resolved.planning_link = new std_msgs.msg.String()
    }

    if (msg.world_link !== undefined) {
      resolved.world_link = std_msgs.msg.String.Resolve(msg.world_link)
    }
    else {
      resolved.world_link = new std_msgs.msg.String()
    }

    if (msg.get_marker !== undefined) {
      resolved.get_marker = std_msgs.msg.Bool.Resolve(msg.get_marker)
    }
    else {
      resolved.get_marker = new std_msgs.msg.Bool()
    }

    if (msg.path_id !== undefined) {
      resolved.path_id = msg.path_id;
    }
    else {
      resolved.path_id = 0
    }

    if (msg.file_path !== undefined) {
      resolved.file_path = std_msgs.msg.String.Resolve(msg.file_path)
    }
    else {
      resolved.file_path = new std_msgs.msg.String()
    }

    return resolved;
    }
};

// Constants for message
ScanningGoal.Constants = {
  STOP: 0,
  MAP: 1,
  MOVE: 2,
  ACTUATE: 3,
}

module.exports = ScanningGoal;

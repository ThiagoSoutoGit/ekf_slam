// Auto-generated. Do not edit!

// (in-package cares_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ScanningGoal = require('./ScanningGoal.js');
let MetricExtractionGoal = require('./MetricExtractionGoal.js');

//-----------------------------------------------------------

class MappingGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.command = null;
      this.scanning_goals = null;
      this.metric_goal = null;
    }
    else {
      if (initObj.hasOwnProperty('command')) {
        this.command = initObj.command
      }
      else {
        this.command = 0;
      }
      if (initObj.hasOwnProperty('scanning_goals')) {
        this.scanning_goals = initObj.scanning_goals
      }
      else {
        this.scanning_goals = [];
      }
      if (initObj.hasOwnProperty('metric_goal')) {
        this.metric_goal = initObj.metric_goal
      }
      else {
        this.metric_goal = new MetricExtractionGoal();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MappingGoal
    // Serialize message field [command]
    bufferOffset = _serializer.uint8(obj.command, buffer, bufferOffset);
    // Serialize message field [scanning_goals]
    // Serialize the length for message field [scanning_goals]
    bufferOffset = _serializer.uint32(obj.scanning_goals.length, buffer, bufferOffset);
    obj.scanning_goals.forEach((val) => {
      bufferOffset = ScanningGoal.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [metric_goal]
    bufferOffset = MetricExtractionGoal.serialize(obj.metric_goal, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MappingGoal
    let len;
    let data = new MappingGoal(null);
    // Deserialize message field [command]
    data.command = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [scanning_goals]
    // Deserialize array length for message field [scanning_goals]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.scanning_goals = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.scanning_goals[i] = ScanningGoal.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [metric_goal]
    data.metric_goal = MetricExtractionGoal.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.scanning_goals.forEach((val) => {
      length += ScanningGoal.getMessageSize(val);
    });
    length += MetricExtractionGoal.getMessageSize(object.metric_goal);
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cares_msgs/MappingGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'f45265005af9eb076d6afb20e6b32c3b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    # Mapping Command Enumeration
    uint8 STOP    = 0
    uint8 MAP     = 1
    uint8 ACTUATE = 3 # e.g. prune/pick/thin
    
    uint8 command
    
    cares_msgs/ScanningGoal[] scanning_goals
    cares_msgs/MetricExtractionGoal metric_goal
    
    ================================================================================
    MSG: cares_msgs/ScanningGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    # Arm Command Enumeration
    uint8 STOP    = 0
    uint8 MAP     = 1
    uint8 MOVE    = 2 # Move Arm to Position
    uint8 ACTUATE = 3 # e.g. prune/pick/thin
    
    # Arm command
    uint8 command
    
    # Initial Pose to move arm too
    geometry_msgs/PoseStamped init_pose
    
    # Planning Link
    std_msgs/String planning_link
    
    # World Link
    std_msgs/String world_link
    
    # To seek out alignment marker or not before scanning
    std_msgs/Bool get_marker
    
    # Path ID from path factory to generate scanning path
    uint8 path_id
    
    # Path to save data too
    std_msgs/String file_path
    
    ================================================================================
    MSG: geometry_msgs/PoseStamped
    # A Pose with reference coordinate frame and timestamp
    Header header
    Pose pose
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: std_msgs/String
    string data
    
    ================================================================================
    MSG: std_msgs/Bool
    bool data
    ================================================================================
    MSG: cares_msgs/MetricExtractionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    # Arm Command Enumeration
    uint8 RESET    = 0
    uint8 CAPTURE  = 1
    uint8 MEASURE  = 2
    
    # Arm command
    uint8 command
    
    # Path to save data too
    std_msgs/String file_path
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MappingGoal(null);
    if (msg.command !== undefined) {
      resolved.command = msg.command;
    }
    else {
      resolved.command = 0
    }

    if (msg.scanning_goals !== undefined) {
      resolved.scanning_goals = new Array(msg.scanning_goals.length);
      for (let i = 0; i < resolved.scanning_goals.length; ++i) {
        resolved.scanning_goals[i] = ScanningGoal.Resolve(msg.scanning_goals[i]);
      }
    }
    else {
      resolved.scanning_goals = []
    }

    if (msg.metric_goal !== undefined) {
      resolved.metric_goal = MetricExtractionGoal.Resolve(msg.metric_goal)
    }
    else {
      resolved.metric_goal = new MetricExtractionGoal()
    }

    return resolved;
    }
};

// Constants for message
MappingGoal.Constants = {
  STOP: 0,
  MAP: 1,
  ACTUATE: 3,
}

module.exports = MappingGoal;
